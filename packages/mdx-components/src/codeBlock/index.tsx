"use client";

import { buttonVariants } from "@mdxify/ui/components/button";
import {
  ScrollArea,
  ScrollBar,
  ScrollViewport,
} from "@mdxify/ui/components/scrollArea";
import { cn } from "@mdxify/ui";
import { useCopyButton } from "@mdxify/ui/hooks";
import { Check, Copy } from "lucide-react";
import {
  type ButtonHTMLAttributes,
  type HTMLAttributes,
  type ReactNode,
  forwardRef,
  useCallback,
  useRef,
  useState,
} from "react";

export type CodeBlockProps = HTMLAttributes<HTMLElement> & {
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode;

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean;

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean;

  viewportProps?: {
    className?: string;
  };

  /**
   * Actions to display in the code block
   */
  actions?: ReactNode;

  /**
   * Callback when title is changed, if provided title becomes editable
   */
  onTitleChange?: (newTitle: string) => void;
};

export const Pre = forwardRef<HTMLPreElement, HTMLAttributes<HTMLPreElement>>(
  ({ className, ...props }, ref) => {
    return (
      <pre
        ref={ref}
        className={cn(
          "shiki text-[13px] p-4 focus-visible:outline-none *:block *:w-full",
          className,
        )}
        {...props}
      >
        {props.children}
      </pre>
    );
  },
);

Pre.displayName = "Pre";

export const CodeBlock = forwardRef<HTMLElement, CodeBlockProps>(
  (
    {
      title,
      allowCopy = true,
      keepBackground = false,
      icon,
      viewportProps,
      actions,
      onTitleChange,
      ...props
    },
    ref,
  ) => {
    const areaRef = useRef<HTMLDivElement>(null);
    const onCopy = useCallback(() => {
      const pre = areaRef.current?.getElementsByTagName("pre").item(0);

      if (!pre) return;

      const clone = pre.cloneNode(true) as HTMLElement;
      clone.querySelectorAll(".nd-copy-ignore").forEach((node) => {
        node.remove();
      });

      void navigator.clipboard.writeText(clone.textContent ?? "");
    }, []);

    return (
      <figure
        ref={ref}
        {...props}
        className={cn(
          "not-prose group fd-codeblock relative my-4 overflow-hidden rounded-lg border bg-fd-secondary/50 text-sm",
          keepBackground && "bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)",
          props.className,
        )}
      >
        {title ? (
          <>
            <div className="flex items-center gap-2 border-b bg-fd-muted px-4 py-1.5">
              {icon ? (
                <div
                  className="text-fd-muted-foreground [&_svg]:size-3.5"
                  dangerouslySetInnerHTML={
                    typeof icon === "string"
                      ? {
                          __html: icon,
                        }
                      : undefined
                  }
                >
                  {typeof icon !== "string" ? icon : null}
                </div>
              ) : null}
              <EditableTitle
                title={String(title)}
                onTitleChange={onTitleChange}
              />
              {(actions || allowCopy) && (
                <div className="flex items-center gap-2 -me-2 [&_svg]:size-3.5">
                  {actions}
                  {allowCopy && (
                    <CopyButton className="backdrop-blur-md" onCopy={onCopy} />
                  )}
                </div>
              )}
            </div>
          </>
        ) : (
          (actions || allowCopy) && (
            <div className="flex items-center gap-2 absolute right-4 top-2 z-[2] [&_svg]:size-3.5">
              {actions}
              {allowCopy && (
                <CopyButton className="backdrop-blur-md" onCopy={onCopy} />
              )}
            </div>
          )
        )}
        <ScrollArea ref={areaRef} dir="ltr">
          <ScrollViewport
            {...viewportProps}
            className={cn("max-h-[600px]", viewportProps?.className)}
          >
            {props.children}
          </ScrollViewport>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </figure>
    );
  },
);

CodeBlock.displayName = "CodeBlock";

interface EditableTitleProps {
  title: string;
  onTitleChange?: (newTitle: string) => void;
}

function EditableTitle({ title, onTitleChange }: EditableTitleProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [inputValue, setInputValue] = useState(title);

  const handleDoubleClick = () => {
    if (onTitleChange) {
      setIsEditing(true);
    }
  };

  const handleBlur = () => {
    setIsEditing(false);
    if (onTitleChange && inputValue !== title) {
      onTitleChange(inputValue);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value);
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      setIsEditing(false);
      if (onTitleChange && inputValue !== title) {
        onTitleChange(inputValue);
      }
    } else if (e.key === "Escape") {
      setInputValue(title);
      setIsEditing(false);
    }
  };

  if (isEditing && onTitleChange) {
    return (
      <input
        type="text"
        className="flex-1 bg-transparent truncate outline-none text-fd-muted-foreground"
        value={inputValue}
        onChange={handleInputChange}
        onBlur={handleBlur}
        onKeyDown={handleKeyDown}
        autoFocus
      />
    );
  }

  return (
    <figcaption
      className="flex-1 truncate text-fd-muted-foreground"
      contentEditable={false}
      onDoubleClick={handleDoubleClick}
      style={onTitleChange ? { cursor: "pointer" } : undefined}
    >
      {title}
    </figcaption>
  );
}

function CopyButton({
  className,
  onCopy,
  ...props
}: ButtonHTMLAttributes<HTMLButtonElement> & {
  onCopy: () => void;
}) {
  const [checked, onClick] = useCopyButton(onCopy);

  return (
    <button
      type="button"
      className={cn(
        buttonVariants({
          variant: "ghost",
        }),
        "transition-opacity group-hover:opacity-100 [&_svg]:size-3.5",
        !checked && "[@media(hover:hover)]:opacity-0",
        className,
      )}
      aria-label={checked ? "Copied Text" : "Copy Text"}
      onClick={onClick}
      {...props}
    >
      <Check className={cn("transition-transform", !checked && "scale-0")} />
      <Copy
        className={cn("absolute transition-transform", checked && "scale-0")}
      />
    </button>
  );
}
